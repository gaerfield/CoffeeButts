/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package de.kramhal.coffeebutts.web

import de.kramhal.coffeebutts.infrastructure.EventBus
import de.kramhal.coffeebutts.model.*
import de.kramhal.coffeebutts.model.FrontDesk
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.FlowPreview
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import mu.KotlinLogging
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.web.bind.annotation.*

@ExperimentalCoroutinesApi
@RestController
@RequestMapping("/coffee")
internal class CoffeeOrderingService(
        private val frontDesk: FrontDesk,
        private val cashierSystem: CashierSystem
) {

    data class OrderCoffee(val requestedCoffees: List<Coffee.Type>)
    data class Bill(val orderId: OrderId)

    private val log = KotlinLogging.logger {}

    @FlowPreview
    @PostMapping("/orders")
    @ResponseStatus(HttpStatus.CREATED)
    suspend fun placeOrder(@RequestBody order: OrderCoffee): Bill {
        val listener = EventBus.on<CashierSystem.Invoiced>()
        val orderId = frontDesk.placeOrder(order.requestedCoffees)

        return listener.consumeAsFlow()
                .first { it.invoice.orderId == orderId }
                .let { Bill(it.invoice.orderId) }
    }

    @PostMapping("/orders/pay/{orderId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    suspend fun pay(@PathVariable orderId: OrderId) {
        cashierSystem.payOrder(orderId)
    }

    @GetMapping("/orders/coffees/{orderId}", produces = [MediaType.APPLICATION_STREAM_JSON_VALUE])
    suspend fun receiveCoffees(@PathVariable orderId: OrderId): Flow<Coffee> {
        return frontDesk.receiveCoffees(orderId)
    }

//    @GetMapping("/orders")
//    suspend fun allOrders() =
//            orderRepository.findAll().asFlow()
//
//    @GetMapping("/orders/{id}")
//    suspend fun byId(@PathVariable id: OrderId) =
//            orderRepository.findById(id).awaitSingle()
}